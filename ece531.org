* ECE-531 Introduction to IoT :TOC:
  - [[#course-info][Course Info]]
    - [[#syllabus][Syllabus]]
    - [[#course-map][Course Map]]
    - [[#schedule][Schedule]]
  - [[#module-1][Module 1]]
  - [[#module-2-software-analysis-and-tools][Module 2 Software Analysis and Tools]]
    - [[#goals-install-all-necessary-dev-deploy--analysis-tool][GOALS: install all necessary dev, deploy, & analysis tool]]
    - [[#install-ubuntu-2004-as-vm-in-vmware-workstation-pro-17-44][Install Ubuntu 20.04 as VM in VMWare Workstation Pro 17]]
    - [[#configure-devbox-with-following-tools-11][Configure devbox with following tools.]]
    - [[#configure-devbox-with-following-tools-22][Configure devbox with following tools.]]
    - [[#configure-deployment-box-vm-inside-vm-33][Configure deployment box (vm inside vm)]]
    - [[#download--analyze-hs110-44][Download & Analyze HS110]]
    - [[#comments][COMMENTS:]]
    - [[#code-blocks][CODE BLOCKS:]]
    - [[#owasp-model-template][OWASP Model Template]]
    - [[#assignment-nc220-firmware-analysis-use-owasp-model-00][Assignment: NC220 Firmware Analysis (use OWASP model)]]
  - [[#module-3][Module 3]]
    - [[#goals][GOALS:]]
      - [[#a][A]]
      - [[#b][B]]
    - [[#videos--slides][Videos / Slides]]
      - [[#project-development-and-attack-surfaces][Project, Development, and Attack Surfaces]]
        - [[#project-i--iot_3_1_1mp4][Project (I) / IoT_3_1_1.mp4]]
        - [[#project-ii--iot_3_1_2mp4][Project (II) / IoT_3_1_2.mp4]]
        - [[#personal-development-process--iot_3_1_3mp4][Personal Development Process / IoT_3_1_3.mp4]]
        - [[#attack-surfaces--iot_3_1_4mp4][Attack Surfaces / IoT_3_1_4.mp4]]
        - [[#networking-support-and-buildroot--iot_3_2_1mp4][Networking Support and Buildroot / IoT_3_2_1.mp4]]
          - [[#making-modifications-to-buildroot-image][Making modifications to buildroot image:]]
          - [[#modify-buildroot-image-to-include-libraries-networking-libcur-curl][Modify buildroot image to include libraries-networking-libcur, curl]]
          - [[#rebuild-image-and-test-see-above][Rebuild image and test (see above)]]
        - [[#networking-configurations--iot_3_2_2mp4][Networking Configurations / IoT_3_2_2.mp4]]
          - [[#protocols-slirp-vs-tap][Protocols, SLIRP vs TAP]]
          - [[#run-simplehttpserver-on-host-22][Run SimpleHTTPServer on HOST]]
        - [[#looking-over-libcurlso--iot_3_2_3mp4][Looking Over Libcurl.so / IoT_3_2_3.mp4]]
          - [[#workflow---scan][WORKFLOW - SCAN]]
          - [[#workflow---record][WORKFLOW - RECORD]]
          - [[#ssl-versions][SSL Versions]]
          - [[#encrypted-algorithms][encrypted algorithms]]
          - [[#urls--websites][url's / websites]]
        - [[#a-libcurl-example---setting-up--iot_3_2_4mp4][A Libcurl Example - Setting Up / Iot_3_2_4.mp4]]
        - [[#a-libcur-example---code--iot_3_2_5mp4][A Libcur Example - Code / IoT_3_2_5.mp4]]
      - [[#networking][Networking]]
      - [[#linking--loading][Linking & Loading]]
      - [[#misc--refs--urls][MISC / REFs / URLs]]
        - [[#sample-projects][Sample Projects:]]
    - [[#homework][Homework]]
  - [[#module-4][Module 4]]
  - [[#module-5][Module 5]]
  - [[#modu-le-6][Modu le 6]]
  - [[#module-7][Module 7]]
  - [[#module-8][Module 8]]
  - [[#misc-info--notes][Misc Info / Notes]]

** Course Info
*** Syllabus
*** Course Map
*** Schedule
** Module 1
N/A
** Module 2 Software Analysis and Tools
*** GOALS: install all necessary dev, deploy, & analysis tool
*** TODO Install Ubuntu 20.04 as VM in VMWare Workstation Pro 17 [4/4]
   - [X] Get ISO
   - [X] Provision hd with 50-100 gb
   - [X] Install as new VM
   - [X] Install VMWware Tools for file transfer
*** TODO Configure devbox with following tools. [1/1]
   - [X] BASIC TOOLS: [3/3]
     - [X] ssh
     - [X] net-tools
     - [X] vim
*** TODO Configure devbox with following tools. [2/2]
   - [X] BASIC TOOLS: [5/5]
     - [X] ssh
     - [X] tmux
     - [X] powerline
     - [X] chrome
     - [X] git tools
   - [X] ADVANCED TOOLS: [1/1]
     - [X] VMware Workstation (inside ubuntu)
*** TODO Configure deployment box (vm inside vm) [3/3]
   - [X] Dolwnload QEMU
   - [X] Download buildroot
   - [X] select vagrant or direct install method
*** TODO Download & Analyze HS110 [4/4]
   - [X] Download firmware
   - [X] Run binwalk on binary
   - [X] Review output of binwalk [5/5]
     - [X] run and save entropy graph
     - [X] run '$ strings -n 10 10300 > strings.out'
     - [X] run '$ strings -n 10 439C > 439C-strings.out'
     - [X] explore f/s i.e. 'squashfs-root:$ tree bin' & 'etc:$ tree .'
     - [X] hone in on start up ps's i.e. shd 'usr/bin:$ tree .'
   - [X] Analyze applications found in the firmware
     - [X] Quick Inventory
     - [X] Static Analysis
     - [X] Dynamic Analysis (chroot req'd when dyn libraries called by applications, see below)
       - [X] run in emulator, QEMU.  copy qemu-*-static into the binwalk output directory you're working in.  Add ' -h' flag...
       - [X] list libraries called by application (i.e. SHD) '$ mips-linux-gnu-readelf -d user/bin/shd', '-d'= dump dyn dependencies
       - [X] list location of libraries above.. i.e. '$ ls -al lib' (shows preloaded libraries, assume will be called by app's)
     - [X] Tools: GDB, LLDB, binutils, DTrace, Strace, 
*** COMMENTS:
#+BEGIN_EXAMPLE
    - BUILDROOT / be careful with net dev, net user, nic info in qemu start up script.
    - BINWALK / needed to install matplot lib for entropy png.
    - DYNAMIC ANALYSIS / when running processes inside firmware emulation, if get 'Error while loading', make sure using 'chroot'
#+END_EXAMPLE
*** CODE BLOCKS:
#+BEGIN_SRC shell
strings -n 10 10300 > strings.out 
strings -n 10 439C > 439C-strings.out
#+END_SRC
*** OWASP Model Template
#+BEGIN_EXAMPLE
     1. Information Gathering / Recon
     2. Obtain Firmware
     3. Anayzing Firmware
     4. Extract Filesystem
     5. Analyze F/S contents
     6. Emulating firmware
     7. Dynamic Analysis
     8. Runtime Analysis
     9. Binary Exploitation
#+END_EXAMPLE
*** TODO Assignment: NC220 Firmware Analysis (use OWASP model) [0/0]
     1. Information Gathering / Recon
        1. Source: Provided via course material
        2. Files:
           1. NC220_v1.1.12_160321_a
           2. NC220_v1.1.12_160321_b
           3. NC220_v1.2.0_170516
        3. Structure / single binary file + pdf of license
        4. Misc:
           1. NVD NIST: https://nvd.nist.gov/products/cpe/search/results?namingFormat=2.3&keyword=NC220
              1. 160321_a CVE's (same for 160321_b)
                 1. CVE-2020-13224
                 2. CVE-2020-10231
                 3. CVE-2020-11445
              2. 170516 CVE's
                 1. CVE-2020-13224
                 2. CVE-2020-12109
                 3. CVE-2020-12110
                 4. CVE-2020-10231
                 5. CVE-2020-11445
     2. Obtain / Extract Firmware
        - [X] Run binwalk on each binary, output to separate 'binout' folders
        - [X] Inventory:
          - binout_16_a
            - cpu=mips, uboot=1.1.3, OS=linux, 
            - 0x19E70 / 'xz' compressed data
            - 0x1E6F85 / 'JFFS2' file system, little endian
            - 0x1F160 / 'LZMA' compressed data (extracted)
          - binout_16_b
            - 0x1C7F61 / 'JFFS2' file system, little endian
            - 0x13C / 'LZMA' compressed data (extracted)
          - binout_17
            - 0x1C7B7A / 'JFFS2' file system, little endian
            - 0x170 / 'LZMA' compressed data (extracted)
     3. Analyze Extracted Firmware
        - [X] v. 16_a
          - [X] strings.out results:
            - root:$1$gt7/dy0B$6hipR95uckYG1cQPXJB.H.:0:0:Linux User,,,:/home/root:/bin/sh
            - grep 'lib' strings_1E.out => (see attached, 14 lib files)
          - [X] tree / file struct results / see output file 'tree.out'
            - note /wlan/MT7620_AP_2T2R-4L_V15.BIN
              - MediaTek MT7620: wifi radio, 580MHz MIPS CPU, 2 UART's, yes GPIO
            - telnetd directory present
            - libc present
        - [X] v. 16_b
          - [X] strings results:
            - Linux version 2.6.36+ (root@CentOS.libin) (gcc version 3.4.2) #291 Fri Mar 18 10:50:56 CST 2016
            - root:$1$gt7/dy0B$6hipR95uckYG1cQPXJB.H.:0:0:Linux User,,,:/home/root:/bin/sh
            - RaLink RT2860 NIC
        - [X] v. 17
          - [X] strings resutls:
          - Linux version 2.6.36 (falcon@FalconsUbuntu) (gcc version 3.4.2) #167 Tue May 16 15:53:16 CST 2017
          - 2.6.36 mod_unload MIPS32_R2 32BIT
          - \hroot:$1$gt7/dy0B$6hipR95uckYG1cQPXJB.H.:0:0:Linux User,,,:/home/root:/bin/sh
     4. Extract File System
        - COMPLETED IN SECTION 3
     5. Analyze F/S contents
        1. static run / busybox
#+BEGIN_SRC shell
# inside cpio-root...  
file bin/busybox
# showed lsb (least sig bit) = little endian, use *-mipsel-*, need to copy into firmwwar dir
which qemu-mipsel-static
cp /usr/bin/qemu-mipsel-static .
sudo chroot . ./qemu-mipsel-static bin/busybox
# capture output...
#+END_SRC
- Sample Output...
#+BEGIN_EXAMPLE
Dynamic section at offset 0xe8 contains 24 entries:                       
  Tag        Type                         Name/Value                      
 0x00000001 (NEEDED)                     Shared library: [libcrypt.so.0]  
 0x00000001 (NEEDED)                     Shared library: [libm.so.0]      
 0x00000001 (NEEDED)                     Shared library: [libc.so.0]      
 0x0000000c (INIT)                       0x4057a4                         
 0x0000000d (FINI)                       0x44fce8                          
 0x00000004 (HASH)                       0x4001d0                          
 0x00000005 (STRTAB)                     0x403c24                          
 0x00000006 (SYMTAB)                     0x401404                          
 0x0000000a (STRSZ)                      7038 (bytes)                       
 0x0000000b (SYMENT)                     16 (bytes)                         
 0x70000016 (MIPS_RLD_MAP)               0x49b5b4                           
 0x00000015 (DEBUG)                      0x0                                
 0x00000003 (PLTGOT)                     0x49b5c0                           
 0x00000011 (REL)                        0x0                                 
 0x00000012 (RELSZ)                      0 (bytes)                            
 0x00000013 (RELENT)                     8 (bytes)                            
 0x70000001 (MIPS_RLD_VERSION)           1                                    
 0x70000005 (MIPS_FLAGS)                 NOTPOT                                
 0x70000006 (MIPS_BASE_ADDRESS)          0x400000                         
 0x7000000a (MIPS_LOCAL_GOTNO)           91                               
 0x70000011 (MIPS_SYMTABNO)              642                            
 0x70000012 (MIPS_UNREFEXTNO)            29                          
 0x70000013 (MIPS_GOTSYM)                0xc                         
 0x00000000 (NULL)                       0x0 
#+END_EXAMPLE
     1. Emulating Firmware
        - [X] run tool qemu-user-static / user mode emulation / good for single binaries, etc
     2. Dynamic Analysis
     3. Runtime Analysis
     4. Binary Exploitation

** Module 3
*** GOALS:
**** A
     - Devolop and analyze an attack surface of an IoT System
     - Implement client comms via networking
     - Use ELF on binaries
     - Review linking and loading
**** B
     - Implement Networking Communication
     - Recognize essential properties of ARM Chipsets
*** Videos / Slides
**** Project, Development, and Attack Surfaces
***** Project (I) / IoT_3_1_1.mp4
      - Large project, full system, lots of programming, best practices, well documented, secure, fully functional...
      - Keywords: best practices, modular c, attack surface, 
***** Project (II) / IoT_3_1_2.mp4
      - Emulate a Thermostat
        - Minimum 3 set points over a day
          - Extra credit for more set points: Weekends, calendars, weekly programs, etc
        - works in degrees C
        - assumes thermocouple
        - program remotely via HTTP
        - report remotely via HTTP (dashboard?)
        - split programming into application (user) and interface (software / hardware)
        - will pe programmed via a known file with a time stamp and instructions for heat on/off
***** Personal Development Process / IoT_3_1_3.mp4
      - Repeatable workflow: first steps, makefile design, general structure, testing?, delivery of production?
      - Speed
      - Quality
      - Workflow Model, i.e.
        1. Template / Skeleton / necessary basic files?
        2. Functions defined in single file? or Each module in single file?
        3. Ea file has associated test?
        4. Application have discrete libraries, 'main' use minimized?
        5. Automated tests, ni ghtly, against repository?
        6. Automated nightly builds?
        7. etc.
***** Attack Surfaces / IoT_3_1_4.mp4
      - What it is
        - Anything a system touches or reads is potential attack.
        - IoT devices especially have very large attack surfaces; bluetooth, wifi, http, 5g, etc.
      - Importance
        - describes Ingress & Egress pathways
        - how sys can be improved / hardened
        - what is safe to neglect / ignore
      - How & Where to document it (not inside the source code!)
        - Create a discrete document / outline for internal use
      - Example ('ls')
      - Hardening
      - Keywords: well-formed environment variables, buffer lengths, well-formatted submitted data, malformed argument attack
***** Networking Support and Buildroot / IoT_3_2_1.mp4
****** Making modifications to buildroot image:
 #+BEGIN_EXAMPLE
 #By default buildroot tracks one build, if want a separate, save 'out of tree'
 1. $> make nconfig #Make edits / changes / save
 2. $> make
 3. run the start script (MAKE SURE TO USE MODIFIED SCRIPT FOR SSH, I.E. TEST-QEMU)
 4. log in as root
 5. $> adduser -h /<home_dir> -s /bin/sh <username>
 6. modify /etc/shadow for new account, make :10933: change
 7. test login with user
 8. log out & test SSH connection ( ssh -p 222 sgc@localhost )
 9. log out & test SCP from host to virt ( scp -P 2222 ./test sgc@localhost:~/ )
 10. test execution ./test (may have to run chmod +x on file)
 11. Complete, modfied Buildroot image ready to use.
 #+END_EXAMPLE
****** Modify buildroot image to include libraries-networking-libcur, curl
****** Rebuild image and test (see above)
***** Networking Configurations / IoT_3_2_2.mp4
****** Protocols, SLIRP vs TAP
       - SLIRP like serial, slow but low overhead, will stay connected
       - TAP uses virtual networking, will require PHY NIC, which would cause us CNX problems with Virt - Host, stick w/ SLIRP
****** Run SimpleHTTPServer on HOST [2/2]
       - [X] (from host) $ sudo python2 -m SimpleHTTPServer 80 (using python2 since host has both 2/3)
       - [X] (from qemu) $ curl -v 192.168.45.128 (confirmed IP of host first)
***** Looking Over Libcurl.so / IoT_3_2_3.mp4

#+BEGIN_EXAMPLE
****** WORKFLOW - SCAN
- [X] Need to 'capture' libcurl.so from running system
- [X] Copy it / host$ scp -P 2222 localhost:/usr/lib/libcurl.so
- [X] Read it / host$ arm-linux-gnueabi-readelf -a libcurl.so
- [X] Dump it / host$ arm-linux-gnueabi-objdump -d libcurl.so > libcurl.dump
- [X] String it / host$ arm-linux-gnueabi-strings -n 5 libcurl.so > strings.out
- [X] Search it / host$ cat strings.out | grep curl > curl-strings.out
#+END_EXAMPLE

#+BEGIN_EXAMPLE
****** WORKFLOW - RECORD
     - [X] CPU type: ARM?, MIPS?, etc
     - [X] Endian-ness: litte ?, big ?
     - [X] Notable Libraries?
     - [X] Notable functions (imported and exported)
     - [X] Other Metadata...
****** SSL Versions
****** encrypted algorithms
****** url's / websites
#+END_EXAMPLE

***** A Libcurl Example - Setting Up / Iot_3_2_4.mp4
      - [X] Set up empty git repo
      - [X] make empty files; .gitignore, makefile, requestor.c
      - [X] push inital commits to remote
      - [X] edit makefile to match from slides (remember TABS != SPACES in makefile)
      - [X] save and commit first edits
***** A Libcur Example - Code / IoT_3_2_5.mp4
      - NOTE: DON'T BE FOOLED BY VIM / MAKEFILE, ERASE FALSE 'TABS' AND CONFIRM KBD 'TABS'!!!
**** Networking
**** Linking & Loading
**** MISC / REFs / URLs
***** Sample Projects:
      - https://randomnerdtutorials.com/esp32-esp8266-thermostat-web-server/
      - https://repositorio.uci.cu/jspui/bitstream/123456789/10139/1/Design%20Patterns%20for%20Embedded%20Systems%20in%20C_%20An%20Embedded%20Software%20Engineering%20Toolkit%20%28%20PDFDrive%20%29.pdf
      - https://ptolemy.berkeley.edu/books/leeseshia/releases/LeeSeshia_DigitalV2_2.pdf
      - 
*** Homework
- [-] cURL client [1/4]
  - [X] Component Tests [2/2]
    - [X] Test getopt.h
    - [X] Test curl/curl.h
  - [ ] Framework [0/9]
    - [ ] INCLUDES / LIBRARIES
      - unistd.h
      - stdio.h
      - stdlib.h
      - getopt.h
      - string.h
    - [ ] CONSTANTS
      - OK 0
      - INIT_ERR 1
      - REQ_ERR 2
    - [ ] VARIABLES
      - [ ] modes / use for mutually exclusive option filter
    - [ ] FUNCTIONS
      - void curl_get
      - void curl_post
      - void curl_put
      - void curl_delete
      - void hw_help
      - void hw_usage
      - void hw_version
    - [ ] USER ARGUMENTS
      - arguments.get
      - arguments.post
      - arguments.put
      - arguments.delete
      - arguments.help
      - arguments.version
      - arguments.url
      - arguments.data
    - [ ] CASES - NOMINAL
      - exclusive get
      - exclusive post
      - exclusive put
      - exclusive delete
    - [ ] CASES - EDGE / FAIL
      - error, too few args
      - error, too many args
      - error, no url
      - error, unrecognized url (malformed)
    - [ ] RESPONSES
    - [ ] MAIN
  - [ ] TESTING [0/2]
    - [ ] x86 TEST [0/3]
      - [ ] COMPILE
      - [ ] TEST PROPER USE
      - [ ] TEST IMPROPER USE
    - [ ] ARM/MIPS TEST [0/3]
      - [ ] COMPILE
      - [ ] TEST PROPER USE
      - [ ] TEST IMPROPER USE
  - [ ] DEPLOY [0/3]
    - [ ] FINALIZE COMMENTS / EDITS
    - [ ] SANITIZE, REMOVE ANY DEBUG DATA
    - [ ] FINAL COMMITS / VERSIONING / VCS
** Module 4
** Module 5
** Modu le 6
** Module 7
** Module 8
** Misc Info / Notes
